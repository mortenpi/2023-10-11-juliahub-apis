# This job pulls in the dataset that was generated by its "parent"
# job (`../analysis.jl`; communicated via `DATASET_NAME`), and creates
# scatterplots from the data. The scatterplots are saved as job outputs.

using DataFrames, CSV, Plots, StatsPlots, JuliaHub

dataset_name = get(ENV, "DATASET_NAME", nothing)
isnothing(dataset_name) && error("DATASET_NAME input parameter was not set")

# Download the dataset and read it into a dataframe
df = let csv_file = tempname()
    JuliaHub.download_dataset("un-population-data-reduced", csv_file)
    CSV.read(csv_file, DataFrame)
end

# Remove all the zero and missing values, so that we could plot
# on log-log axes
filter!(
    t -> coalesce(t.population != 0, false) && coalesce(t.population_density != 0, false),
    df
)

# Plot the population vs population density on a scatterplot.
# For, we'll include all year, colored differently.
plots = mktempdir()

p = @df df scatter(
    :population_density, :population, group=:Year,
    xlabel = "Population density", ylabel = "Total population (millions)",
    yaxis = :log10, xaxis = :log10,
    dpi=600
)
savefig(p, joinpath(plots, "populations-all-years.png"))

for year in unique(df[:,:Year])
    p = @df filter(t -> t.Year == year, df) scatter(
        :population_density, :population, group=:Year,
        xlabel = "Population density", ylabel = "Total population (millions)",
        yaxis = :log10, xaxis = :log10,
        dpi=600
    )
    savefig(p, joinpath(plots, "populations-$(year).png"))
end

ENV["RESULTS_FILE"] = plots
